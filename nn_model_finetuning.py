# -*- coding: utf-8 -*-
"""nn_model_finetuning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KoTuBMeEmV1XCYjI2W1z1FFz20NiaysB
"""

!pip install pandas python-docx

import docx
import re
import pandas as pd
import csv

def extract_qa_pairs(doc_path):
    # Load the document
    doc = docx.Document(doc_path)

    # Get all paragraphs as text
    paragraphs = [p.text.strip() for p in doc.paragraphs if p.text.strip()]

    qa_pairs = []
    current_question = ""
    current_answer = []
    in_question = False
    in_answer = False

    for para in paragraphs:
        # Check if this is a question (starts with Q) or question pattern
        if para.startswith("Q)") or re.match(r"^Q\)", para):
            # If we were already processing a Q&A pair, save it
            if current_question and current_answer:
                # Clean the question
                clean_question = clean_question_text(current_question)
                # Join the answer paragraphs with newlines to preserve formatting
                clean_answer = "\n".join(current_answer)
                qa_pairs.append((clean_question, clean_answer))

            # Start a new question
            current_question = para
            current_answer = []
            in_question = True
            in_answer = False

        # If we're not in a question and the previous paragraph was a question,
        # this must be the start of an answer
        elif in_question and not in_answer:
            in_question = False
            in_answer = True
            current_answer.append(para)

        # If we're in an answer, keep adding paragraphs to the current answer
        elif in_answer:
            current_answer.append(para)

    # Don't forget to add the last Q&A pair
    if current_question and current_answer:
        clean_question = clean_question_text(current_question)
        clean_answer = "\n".join(current_answer)
        qa_pairs.append((clean_question, clean_answer))

    return qa_pairs

def clean_question_text(question):
    """Clean the question text by removing prefixes like 'Q)' and trimming whitespace."""
    # Remove "Q)" prefix
    question = re.sub(r"^Q\)\s*", "", question)

    # Remove any numbering
    question = re.sub(r"^\d+[\.\)]\s*", "", question)

    # Remove any other question indicators
    question = re.sub(r"^Question:\s*", "", question)

    # Clean up extra whitespace
    question = re.sub(r"\s+", " ", question).strip()

    return question

def main():
    doc_path = "nnfinal-data-5.docx"  # Update with your file path
    output_csv = "clean_qa_dataset.csv"

    # Extract QA pairs
    qa_pairs = extract_qa_pairs(doc_path)

    print(f"Extracted {len(qa_pairs)} question-answer pairs")

    # Write to CSV, ensuring proper encoding and handling of newlines
    with open(output_csv, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f, quoting=csv.QUOTE_ALL)
        writer.writerow(['question', 'answer'])
        writer.writerows(qa_pairs)

    # Create a pandas DataFrame for preview
    df = pd.DataFrame(qa_pairs, columns=['question', 'answer'])
    print("\nPreview of the first 5 rows:")
    print(df.head())

if __name__ == "__main__":
    main()